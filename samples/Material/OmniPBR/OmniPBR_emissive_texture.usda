#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (0, 0, 50000)
                double radius = 500
            }
            dictionary Perspective = {
                double3 position = (129.96781054519568, 188.08352997140207, 368.55283174974295)
                double3 target = (-1.4531794120956363, -10.300864821221154, 4.709554120047244)
            }
            dictionary Right = {
                double3 position = (-50000, 0, 0)
                double radius = 500
            }
            dictionary Top = {
                double3 position = (0, 50000, 0)
                double radius = 500
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary navmeshSettings = {
            double agentHeight = 180
            double agentRadius = 20
            bool excludeRigidBodies = 1
            int ver = 1
            double voxelCeiling = 460
        }
        dictionary omni_layer = {
            string authoring_layer = "./OmniPBR_emissive_texture.usda"
        }
        dictionary renderSettings = {
        }
    }
    defaultPrim = "Root"
    metersPerUnit = 0.01
    upAxis = "Y"
)

def Xform "Root"
{
    def Scope "Looks"
    {
        def Material "OmniPBR"
        {
            token outputs:mdl:displacement.connect = </Root/Looks/OmniPBR/Shader.outputs:out>
            token outputs:mdl:surface.connect = </Root/Looks/OmniPBR/Shader.outputs:out>
            token outputs:mdl:volume.connect = </Root/Looks/OmniPBR/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0, 0, 0) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Color"
                    doc = "This is the albedo base color"
                    hidden = false
                    renderType = "color"
                )
                asset inputs:emissive_color_texture = @../textures/neon_emissive.jpg@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Color map"
                    doc = "The emissive color texture"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:emissive_intensity = 4000 (
                    customData = {
                        float default = 40
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                token outputs:out
            }
        }
    }

    def Mesh "Cube"
    {
        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
        int[] faceVertexIndices = [3, 2, 0, 1, 3, 0, 5, 4, 2, 3, 5, 2, 7, 6, 4, 5, 7, 4, 1, 0, 6, 7, 1, 6, 5, 3, 1, 7, 5, 1, 2, 4, 6, 0, 2, 6]
        rel material:binding = </Root/Looks/OmniPBR> (
            bindMaterialAs = "weakerThanDescendants"
        )
        normal3f[] normals = [(0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 1, -0), (0, 1, -0), (0, 1, -0), (0, 1, -0), (0, 1, -0), (0, 1, -0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, -1, -0), (0, -1, -0), (0, -1, -0), (0, -1, -0), (0, -1, -0), (0, -1, -0), (-1, 0, -0), (-1, 0, -0), (-1, 0, -0), (-1, 0, -0), (-1, 0, -0), (-1, 0, -0), (1, 0, -0), (1, 0, -0), (1, 0, -0), (1, 0, -0), (1, 0, -0), (1, 0, -0)] (
            interpolation = "faceVarying"
        )
        point3f[] points = [(50, -50, -50), (-50, -50, -50), (50, 50, -50), (-50, 50, -50), (50, 50, 50), (-50, 50, 50), (50, -50, 50), (-50, -50, 50)]
        texCoord2f[] primvars:st = [(1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 0)] (
            interpolation = "faceVarying"
        )
        uniform token subdivisionScheme = "none"
        token ui:displayGroup = "Material Graphs"
        token ui:displayName = "Cube"
        int ui:order = 1024
        token visibility = "inherited"
        float3 xformOp:rotateXYZ = (0, -0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }
}

