#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (0, 0, 50050)
                double radius = 500
            }
            dictionary Perspective = {
                double3 position = (233.49200516863496, -211.4330581995967, 350.06707770307963)
                double3 target = (-9.922344990446163, 2.207499850617296, -20.18592843405537)
            }
            dictionary Right = {
                double3 position = (-50050, 0, -1.1113332476497817e-11)
                double radius = 500
            }
            dictionary Top = {
                double3 position = (-4.3341100614586435e-12, 50050, 1.1113332476497817e-11)
                double radius = 500
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            float3 "rtx:dynamicDiffuseGI:probeCounts" = (6, 6, 6)
            float3 "rtx:dynamicDiffuseGI:probeGridOrigin" = (-210, -250, -10)
            float3 "rtx:dynamicDiffuseGI:volumeSize" = (600, 440, 300)
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:lightspeed:material:overrideAlbedo" = (0.5, 0.5, 0.5)
            float3 "rtx:lightspeed:material:overrideEmissiveColor" = (0.5, 0.5, 0.5)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
        }
    }
    defaultPrim = "root"
    doc = "USD Exporter for Shade3D (0.1.2.0)"
    endTimeCode = 300
    framesPerSecond = 30
    metersPerUnit = 0.01
    startTimeCode = 0
)

def Xform "root" (
    kind = "component"
)
{
    def Scope "Materials"
    {
        def Material "half_sphere"
        {
            token outputs:surface.connect = </root/Materials/half_sphere/PBRShader.outputs:surface>

            def Shader "PBRShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0
                token outputs:surface
            }
        }
    }

    def Mesh "sphere"
    {
        uniform bool doubleSided = 1
        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [2, 1, 0, 3, 2, 0, 4, 3, 0, 5, 4, 0, 6, 5, 0, 7, 6, 0, 8, 7, 0, 9, 8, 0, 10, 9, 0, 11, 10, 0, 12, 11, 0, 13, 12, 0, 14, 13, 0, 15, 14, 0, 16, 15, 0, 1, 16, 0, 2, 18, 17, 1, 3, 19, 18, 2, 4, 20, 19, 3, 5, 21, 20, 4, 6, 22, 21, 5, 7, 23, 22, 6, 8, 24, 23, 7, 9, 25, 24, 8, 10, 26, 25, 9, 11, 27, 26, 10, 12, 28, 27, 11, 13, 29, 28, 12, 14, 30, 29, 13, 15, 31, 30, 14, 16, 32, 31, 15, 1, 17, 32, 16, 18, 34, 33, 17, 19, 35, 34, 18, 20, 36, 35, 19, 21, 37, 36, 20, 22, 38, 37, 21, 23, 39, 38, 22, 24, 40, 39, 23, 25, 41, 40, 24, 26, 42, 41, 25, 27, 43, 42, 26, 28, 44, 43, 27, 29, 45, 44, 28, 30, 46, 45, 29, 31, 47, 46, 30, 32, 48, 47, 31, 17, 33, 48, 32, 34, 50, 49, 33, 35, 51, 50, 34, 36, 52, 51, 35, 37, 53, 52, 36, 38, 54, 53, 37, 39, 55, 54, 38, 40, 56, 55, 39, 41, 57, 56, 40, 42, 58, 57, 41, 43, 59, 58, 42, 44, 60, 59, 43, 45, 61, 60, 44, 46, 62, 61, 45, 47, 63, 62, 46, 48, 64, 63, 47, 33, 49, 64, 48]
        rel material:binding = </root/Materials/half_sphere>
        normal3f[] normals = [(5.7016987e-9, 1, -4.038703e-9), (0.3821948, 0.92408174, -1.7150562e-8), (0.35310194, 0.92408174, 0.14625964), (0.27025253, 0.92408174, 0.27025256), (0.1462596, 0.92408174, 0.35310194), (-4.001798e-8, 0.92408174, 0.38219482), (-0.14625964, 0.92408174, 0.35310194), (-0.27025253, 0.92408174, 0.27025253), (-0.35310197, 0.92408174, 0.14625959), (-0.3821948, 0.92408174, -4.001798e-8), (-0.35310194, 0.92408174, -0.14625967), (-0.2702525, 0.92408174, -0.27025256), (-0.14625959, 0.92408174, -0.35310197), (4.001798e-8, 0.92408174, -0.3821948), (0.14625967, 0.92408174, -0.35310194), (0.2702526, 0.92408174, -0.27025247), (0.353102, 0.92408174, -0.14625958), (0.70658445, 0.7076287, -7.671159e-9), (0.65279895, 0.70762867, 0.27039814), (0.49963063, 0.70762867, 0.4996307), (0.2703981, 0.7076287, 0.65279895), (-6.904043e-8, 0.7076287, 0.70658445), (-0.2703982, 0.70762867, 0.65279895), (-0.49963072, 0.7076287, 0.4996307), (-0.65279895, 0.70762867, 0.2703981), (-0.70658445, 0.7076287, -7.287601e-8), (-0.6527989, 0.7076287, -0.27039823), (-0.49963063, 0.7076287, -0.49963075), (-0.27039808, 0.7076287, -0.65279895), (7.287601e-8, 0.7076287, -0.70658445), (0.27039826, 0.70762867, -0.6527989), (0.49963075, 0.70762867, -0.4996306), (0.65279895, 0.7076287, -0.27039808), (0.92368215, 0.3831597, 2.3159094e-8), (0.853371, 0.3831597, 0.35347784), (0.65314186, 0.38315967, 0.65314186), (0.3534778, 0.3831597, 0.8533711), (-5.7897736e-8, 0.38315973, 0.92368215), (-0.3534779, 0.3831597, 0.85337096), (-0.65314186, 0.3831597, 0.65314186), (-0.853371, 0.3831597, 0.35347775), (-0.9236821, 0.38315973, -8.1056825e-8), (-0.85337096, 0.38315973, -0.35347793), (-0.65314174, 0.3831597, -0.653142), (-0.3534777, 0.38315973, -0.8533711), (1.0421592e-7, 0.38315973, -0.92368215), (0.35347795, 0.3831597, -0.85337096), (0.653142, 0.38315973, -0.6531418), (0.853371, 0.3831597, -0.35347772), (0.98078525, 0.1950903, 3.795521e-8), (0.90612745, 0.19509028, 0.37533027), (0.6935199, 0.19509026, 0.69351995), (0.37533027, 0.19509028, 0.90612745), (-3.795521e-8, 0.19509032, 0.98078525), (-0.37533033, 0.19509037, 0.9061274), (-0.69351995, 0.19509038, 0.69351995), (-0.90612745, 0.19509038, 0.3753302), (-0.98078525, 0.19509038, -7.591042e-8), (-0.9061274, 0.19509037, -0.37533036), (-0.69351983, 0.19509035, -0.69352007), (-0.37533012, 0.19509035, -0.90612745), (1.2145667e-7, 0.19509034, -0.98078525), (0.3753304, 0.19509034, -0.9061274), (0.69352, 0.19509032, -0.69351983), (0.9061275, 0.19509031, -0.37533018)]
        point3f[] points = [(0, 50, 0), (19.13417, 46.193977, 0), (17.67767, 46.193977, 7.32233), (13.5299015, 46.193977, 13.5299015), (7.322329, 46.193977, 17.67767), (-8.3638116e-7, 46.193977, 19.13417), (-7.3223314, 46.193977, 17.677668), (-13.529902, 46.193977, 13.5299015), (-17.67767, 46.193977, 7.322328), (-19.13417, 46.193977, -0.0000016727623), (-17.677668, 46.193977, -7.322332), (-13.5299, 46.193977, -13.529902), (-7.3223276, 46.193977, -17.67767), (0.0000025091435, 46.193977, -19.13417), (7.322333, 46.193977, -17.677668), (13.529904, 46.193977, -13.5299), (17.67767, 46.193977, -7.3223267), (35.35534, 35.355343, 0), (32.664074, 35.355343, 13.529902), (24.999998, 35.355343, 25), (13.5299015, 35.355343, 32.664074), (-0.000001545431, 35.355343, 35.35534), (-13.529904, 35.355343, 32.664074), (-25.000002, 35.355343, 24.999998), (-32.664074, 35.355343, 13.5299), (-35.35534, 35.355343, -0.000003090862), (-32.664074, 35.355343, -13.529906), (-24.999998, 35.355343, -25.000002), (-13.529899, 35.355343, -32.664074), (0.000004636293, 35.355343, -35.35534), (13.529907, 35.355343, -32.664074), (25.000004, 35.355343, -24.999996), (32.664074, 35.355343, -13.529897), (46.193977, 19.134172, 0), (42.67767, 19.134172, 17.677671), (32.664074, 19.134172, 32.664074), (17.67767, 19.134172, 42.67767), (-0.0000020192028, 19.134172, 46.193977), (-17.677671, 19.134172, 42.67767), (-32.664074, 19.134172, 32.664074), (-42.67767, 19.134172, 17.677666), (-46.193977, 19.134172, -0.0000040384057), (-42.67767, 19.134172, -17.677673), (-32.664074, 19.134172, -32.664078), (-17.677664, 19.134172, -42.67767), (0.000006057609, 19.134172, -46.193977), (17.677675, 19.134172, -42.67767), (32.664078, 19.134172, -32.66407), (42.677673, 19.134172, -17.677664), (50, 0, 0), (46.193977, 0, 19.134172), (35.35534, 0, 35.355343), (19.13417, 0, 46.193977), (-0.0000021855694, 0, 50), (-19.134174, 0, 46.193977), (-35.355343, 0, 35.35534), (-46.19398, 0, 19.134169), (-50, 0, -0.000004371139), (-46.193977, 0, -19.134176), (-35.355335, 0, -35.355343), (-19.134167, 0, -46.19398), (0.0000065567087, 0, -50), (19.134178, 0, -46.193974), (35.355343, 0, -35.355335), (46.19398, 0, -19.134165)]
        texCoord2f[] primvars:st = [(0.9375, 0.875), (1, 0.875), (0.96875, 1), (0.875, 0.875), (0.9375, 0.875), (0.90625, 1), (0.8125, 0.875), (0.875, 0.875), (0.84375, 1), (0.75, 0.875), (0.8125, 0.875), (0.78125, 1), (0.6875, 0.875), (0.75, 0.875), (0.71875, 1), (0.625, 0.875), (0.6875, 0.875), (0.65625, 1), (0.5625, 0.875), (0.625, 0.875), (0.59375, 1), (0.5, 0.875), (0.5625, 0.875), (0.53125, 1), (0.4375, 0.875), (0.5, 0.875), (0.46875, 1), (0.375, 0.875), (0.4375, 0.875), (0.40625, 1), (0.3125, 0.875), (0.375, 0.875), (0.34375, 1), (0.25, 0.875), (0.3125, 0.875), (0.28125, 1), (0.1875, 0.875), (0.25, 0.875), (0.21875, 1), (0.125, 0.875), (0.1875, 0.875), (0.15625, 1), (0.0625, 0.875), (0.125, 0.875), (0.09375, 1), (0, 0.875), (0.0625, 0.875), (0.03125, 1), (0.9375, 0.875), (0.9375, 0.75), (1, 0.75), (1, 0.875), (0.875, 0.875), (0.875, 0.75), (0.9375, 0.75), (0.9375, 0.875), (0.8125, 0.875), (0.8125, 0.75), (0.875, 0.75), (0.875, 0.875), (0.75, 0.875), (0.75, 0.75), (0.8125, 0.75), (0.8125, 0.875), (0.6875, 0.875), (0.6875, 0.75), (0.75, 0.75), (0.75, 0.875), (0.625, 0.875), (0.625, 0.75), (0.6875, 0.75), (0.6875, 0.875), (0.5625, 0.875), (0.5625, 0.75), (0.625, 0.75), (0.625, 0.875), (0.5, 0.875), (0.5, 0.75), (0.5625, 0.75), (0.5625, 0.875), (0.4375, 0.875), (0.4375, 0.75), (0.5, 0.75), (0.5, 0.875), (0.375, 0.875), (0.375, 0.75), (0.4375, 0.75), (0.4375, 0.875), (0.3125, 0.875), (0.3125, 0.75), (0.375, 0.75), (0.375, 0.875), (0.25, 0.875), (0.25, 0.75), (0.3125, 0.75), (0.3125, 0.875), (0.1875, 0.875), (0.1875, 0.75), (0.25, 0.75), (0.25, 0.875), (0.125, 0.875), (0.125, 0.75), (0.1875, 0.75), (0.1875, 0.875), (0.0625, 0.875), (0.0625, 0.75), (0.125, 0.75), (0.125, 0.875), (0, 0.875), (0, 0.75), (0.0625, 0.75), (0.0625, 0.875), (0.9375, 0.75), (0.9375, 0.625), (1, 0.625), (1, 0.75), (0.875, 0.75), (0.875, 0.625), (0.9375, 0.625), (0.9375, 0.75), (0.8125, 0.75), (0.8125, 0.625), (0.875, 0.625), (0.875, 0.75), (0.75, 0.75), (0.75, 0.625), (0.8125, 0.625), (0.8125, 0.75), (0.6875, 0.75), (0.6875, 0.625), (0.75, 0.625), (0.75, 0.75), (0.625, 0.75), (0.625, 0.625), (0.6875, 0.625), (0.6875, 0.75), (0.5625, 0.75), (0.5625, 0.625), (0.625, 0.625), (0.625, 0.75), (0.5, 0.75), (0.5, 0.625), (0.5625, 0.625), (0.5625, 0.75), (0.4375, 0.75), (0.4375, 0.625), (0.5, 0.625), (0.5, 0.75), (0.375, 0.75), (0.375, 0.625), (0.4375, 0.625), (0.4375, 0.75), (0.3125, 0.75), (0.3125, 0.625), (0.375, 0.625), (0.375, 0.75), (0.25, 0.75), (0.25, 0.625), (0.3125, 0.625), (0.3125, 0.75), (0.1875, 0.75), (0.1875, 0.625), (0.25, 0.625), (0.25, 0.75), (0.125, 0.75), (0.125, 0.625), (0.1875, 0.625), (0.1875, 0.75), (0.0625, 0.75), (0.0625, 0.625), (0.125, 0.625), (0.125, 0.75), (0, 0.75), (0, 0.625), (0.0625, 0.625), (0.0625, 0.75), (0.9375, 0.625), (0.9375, 0.5), (1, 0.5), (1, 0.625), (0.875, 0.625), (0.875, 0.5), (0.9375, 0.5), (0.9375, 0.625), (0.8125, 0.625), (0.8125, 0.5), (0.875, 0.5), (0.875, 0.625), (0.75, 0.625), (0.75, 0.5), (0.8125, 0.5), (0.8125, 0.625), (0.6875, 0.625), (0.6875, 0.5), (0.75, 0.5), (0.75, 0.625), (0.625, 0.625), (0.625, 0.5), (0.6875, 0.5), (0.6875, 0.625), (0.5625, 0.625), (0.5625, 0.5), (0.625, 0.5), (0.625, 0.625), (0.5, 0.625), (0.5, 0.5), (0.5625, 0.5), (0.5625, 0.625), (0.4375, 0.625), (0.4375, 0.5), (0.5, 0.5), (0.5, 0.625), (0.375, 0.625), (0.375, 0.5), (0.4375, 0.5), (0.4375, 0.625), (0.3125, 0.625), (0.3125, 0.5), (0.375, 0.5), (0.375, 0.625), (0.25, 0.625), (0.25, 0.5), (0.3125, 0.5), (0.3125, 0.625), (0.1875, 0.625), (0.1875, 0.5), (0.25, 0.5), (0.25, 0.625), (0.125, 0.625), (0.125, 0.5), (0.1875, 0.5), (0.1875, 0.625), (0.0625, 0.625), (0.0625, 0.5), (0.125, 0.5), (0.125, 0.625), (0, 0.625), (0, 0.5), (0.0625, 0.5), (0.0625, 0.625)] (
            interpolation = "faceVarying"
        )
        int[] primvars:st:indices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239]
        bool singleSided = 1
        uniform token subdivisionScheme = "none"
    }

    def DistantLight "DistantLight" (
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float angle = 1
        float intensity = 3000
        float shaping:cone:angle = 180
        float shaping:cone:softness
        float shaping:focus
        color3f shaping:focusTint
        asset shaping:ies:file
        double3 xformOp:rotateXYZ = (315, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def SphereLight "SphereLight" (
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float intensity = 30000
        float radius = 10
        float shaping:cone:angle = 180
        float shaping:cone:softness
        float shaping:focus
        color3f shaping:focusTint
        asset shaping:ies:file
        double3 xformOp:rotateXYZ = (0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, -88.39654449798323, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }
}

